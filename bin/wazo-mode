#!/bin/bash

# This script will change the mode of the Wazo stacks. Mode change
# allows Kamailio to route traffic to a secondary Wazo stack while
# the main one is being upgraded.

# The following mode are available
# maintenance - When running on the secondary Wazo to upgrade the primary
# normal - When running on the primary Wazo (alternatively to upgrade the secondary)

set -e
set -u  # fail if variable is undefined
set -o pipefail  # fail if command before pipe fails

function usage () {
    echo "$0 <maintenance|normal>"
    exit 1
}

# Checking command line arguments
if [ $# -ne 1 ]; then
    usage
fi

MODE="$1"
case $MODE in

    "maintenance")
        echo "Going into maintenance mode"
        ;;

    "normal")
        echo "Going into normal mode"
        ;;

    *)
        usage
        ;;
esac

# Checking if correctly configured
CONFIG_FILENAME="/etc/wazo-maintenance/config.conf"
source "${CONFIG_FILENAME}"

if [ -z "${PRIMARY_HOSTNAME}" ]; then
    echo "Missing configuration for PRIMARY_HOSTNAME in ${CONFIG_FILENAME}"
    exit 1
fi

if [ -z "${SECONDARY_HOSTNAME}" ]; then
    echo "Missing configuration for SECONDARY_HOSTNAME in ${CONFIG_FILENAME}"
    exit 1
fi


echo "Switching to mode ${MODE} primary ${PRIMARY_HOSTNAME} secondary ${SECONDARY_HOSTNAME}"

function sync () {
    case ${MODE} in

    "normal")
        echo "Generating call logs"
        ssh "root@${PRIMARY_HOSTNAME}" ". /etc/profile.d/xivo_uuid.sh && /usr/bin/wazo-call-logs"
        ;;

    "maintenance")
        echo "Synchronizing database"
        ssh "root@${PRIMARY_HOSTNAME}" "/usr/sbin/xivo-master-slave-db-replication" "${SECONDARY_HOSTNAME}"

        echo "Synchronizing data"
        ssh "root@${PRIMARY_HOSTNAME}" "/usr/bin/xivo-sync"

        echo "Generating call logs"
        ssh "root@${SECONDARY_HOSTNAME}" ". /etc/profile.d/xivo_uuid.sh && /usr/bin/wazo-call-logs"

        ;;

    esac
}

function reload_asterisk () {
    case ${MODE} in

        "normal")
            where="root@${PRIMARY_HOSTNAME}"
            ;;

        "maintenance")
            where="root@${SECONDARY_HOSTNAME}"
            ;;

    esac

    ssh ${where} "asterisk -rx 'core reload'"
}

function switch_traffic () {
    case ${MODE} in

        "normal")
            routemode=0
            ;;

        "maintenance")
            routemode=2
            ;;

    esac

    echo "Switching Kamailio routing mode to ${routemode}"
    kamctl rpc pv.shvSet routemode int ${routemode}
}

function call_count () {
    case ${MODE} in

        "normal")
            where="root@${SECONDARY_HOSTNAME}"
            ;;

        "maintenance")
            where="root@${PRIMARY_HOSTNAME}"
            ;;

    esac

    number_of_calls=$(ssh "${where}" "asterisk -rx 'core show channels' | grep 'active call' | awk -F' ' '{ print \$1 }'")
}


function monitor_calls () {
    echo "Monitoring calls"
    while : ; do
        number_of_calls=-1; call_count
        echo "There are currently ${number_of_calls} active calls"
        if [[ "${number_of_calls}" == "0" ]]; then
            break
        else
            sleep 1
        fi
    done
    echo "No active calls"
}

sync
reload_asterisk
switch_traffic
monitor_calls
